{"version":3,"sources":["webpack:///src/app/pmac/servidor/servidor.page.scss","webpack:///src/app/pmac/servidor/servidor.page.html","webpack:///src/app/pmac/servidor/servidor.page.ts","webpack:///src/app/pmac/servidor/servidor.module.ts","webpack:///src/app/pmac/servidor/servidor-routing.module.ts"],"names":["ServidorPage","selector","template","ServidorPageModule","imports","declarations","routes","path","component","ServidorPageRoutingModule","forChild","exports"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAe;;;AAAA;;;;;;;;;;;;;;;;ACAf;AAAe;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCOFA,YAAY;AAEvB,gCAAc;AAAA;AAAG;;AAFM;AAAA;AAAA,qCAIZ,CACV;AALsB;;AAAA;AAAA,S;;;;;;AAAZA,kBAAY,6DALxB,gEAAU;AACTC,gBAAQ,EAAE,cADD;AAETC,gBAAQ,EAAR,sEAFS;;AAAA,OAAV,CAKwB,GAAZF,YAAY,CAAZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCYAG,kBAAkB;AAAA;AAAA,O;;AAAlBA,wBAAkB,6DAT9B,+DAAS;AACRC,eAAO,EAAE,CACP,4DADO,EAEP,0DAFO,EAGP,0DAHO,EAIP,kFAJO,CADD;AAORC,oBAAY,EAAE,CAAC,2DAAD;AAPN,OAAT,CAS8B,GAAlBF,kBAAkB,CAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdb,UAAMG,MAAM,GAAW,CACrB;AACEC,YAAI,EAAE,EADR;AAEEC,iBAAS,EAAE;AAFb,OADqB,CAAvB;;UAWaC,yBAAyB;AAAA;AAAA,O;;AAAzBA,+BAAyB,6DAJrC,+DAAS;AACRL,eAAO,EAAE,CAAC,6DAAaM,QAAb,CAAsBJ,MAAtB,CAAD,CADD;AAERK,eAAO,EAAE,CAAC,4DAAD;AAFD,OAAT,CAIqC,GAAzBF,yBAAyB,CAAzB","file":"pmac-servidor-servidor-module-es5.js","sourcesContent":["export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzZXJ2aWRvci5wYWdlLnNjc3MifQ== */\";","export default \"<ion-header>\\n  <ion-toolbar>\\n    <ion-buttons slot=\\\"start\\\"> <ion-back-button defaultHref=\\\"/\\\" color=\\\"light\\\" text=\\\"\\\"></ion-back-button> </ion-buttons>\\n    <ion-title>PMAC</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\n  <p class=\\\"p-title\\\">Alterar nome do Servidor Bioslab.</p>\\n \\n  <p class=\\\"p-texto\\\">Consiste em definir qual a base de informações, será acessada pelo sistema, necessita de muita atenção para configurar \\n    o servidor correto\\n  </p>\\n  \\n  <p class=\\\"p-texto05\\\">\\n    <strong>PASSO 1: </strong>Clique no ícone de <ion-text color=\\\"danger\\\"><strong>\\\"roda dentada\\\"</strong></ion-text>\\n  </p>\\n  <ion-img src=\\\"https://i.ibb.co/9wMnkNJ/login-bioslab.png\\\"class=\\\"ion-img\\\" ></ion-img>\\n \\n  <p class=\\\"p-texto05\\\">\\n    <strong>PASSO 2: </strong>Clique no ícone de <ion-text color=\\\"danger\\\"><strong>\\\"Alterar sevidor\\\"</strong></ion-text>\\n  </p>\\n  <ion-img src=\\\"https://i.ibb.co/k0SkcT9/bioslab-menu.png\\\" class=\\\"ion-img\\\"></ion-img>\\n \\n  <p class=\\\"p-texto05\\\">\\n    <strong>PASSO 3: </strong>Defina o nome do servidor, ou seja, se o nome do servidor for SRVTESTE, ficará, \\n    <ion-text color=\\\"tertiary\\\"><strong>\\\"Servidor: SRVTESTE\\\"</strong></ion-text>.     \\n  </p>\\n  <p class=\\\"p-texto\\\">Em caso, seja uma base de teste, ou acessa \\n    um servidor configurado em porta de comunicação diferente, será necessário informar a porta de comunicação configurada no PMBS, e ficará como na imagem abaixo. \\n    Karyon.\\n   </p>   \\n  <ion-img src=\\\"https://i.ibb.co/mqNmTwP/alterar-servidor.png\\\" class=\\\"ion-img\\\"></ion-img>   \\n\\n</ion-content>\\n\";","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-servidor',\n  templateUrl: './servidor.page.html',\n  styleUrls: ['./servidor.page.scss'],\n})\nexport class ServidorPage implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ServidorPageRoutingModule } from './servidor-routing.module';\n\nimport { ServidorPage } from './servidor.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ServidorPageRoutingModule\n  ],\n  declarations: [ServidorPage]\n})\nexport class ServidorPageModule {}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ServidorPage } from './servidor.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ServidorPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ServidorPageRoutingModule {}\n"]}